// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id             Int                      @id @default(autoincrement())
  color          String
  ProductGroup   ProductGroup             @relation(fields: [productGroupId], references: [id])
  productGroupId Int
  img            ProductImage[]
  cart           Cart[]
  product        ProductsOnProductSizes[]

  @@map("products")
}

model ProductGroup {
  id            Int       @id @default(autoincrement())
  name          Int
  price         Int
  discountPrice Decimal?  @map("discount_price")
  description   String
  country       String
  createdAt     DateTime  @default(now()) @map("created_at")
  Category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    Int
  product       Product[]
  heart         Heart[]

  @@map("product_groups")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  imageUrl  String  @map("image_url")
  isList    Boolean @default(false) @map("is_list")
  Product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("product_images")
}

model ProductSize {
  id    Int                      @id @default(autoincrement())
  size  String
  sizes ProductsOnProductSizes[]

  @@map("product_sizes")
}

model ProductsOnProductSizes {
  id            Int         @id @default(autoincrement())
  count         Int
  Product       Product     @relation(fields: [productId], references: [id])
  productId     Int
  ProductSize   ProductSize @relation(fields: [productSizeId], references: [id])
  productSizeId Int

  @@map("products_product_sizes")
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String
  productGroup ProductGroup[]

  @@map("categories")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String
  password  String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt String?  @map("updated_at")
  cart      Cart[]
  heart     Heart[]

  @@map("users")
}

model Cart {
  id        Int     @id @default(autoincrement())
  Product   Product @relation(fields: [productId], references: [id])
  productId Int
  User      User    @relation(fields: [userId], references: [id])
  userId    Int

  @@map("cart")
}

model Heart {
  id             Int          @id @default(autoincrement())
  ProductGroup   ProductGroup @relation(fields: [productGroupId], references: [id])
  productGroupId Int
  User           User         @relation(fields: [userId], references: [id])
  userId         Int

  @@map("hearts")
}
